# -*- coding: utf-8 -*-
"""House price prediction cali.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RmVvvSv4cCJeh4uorRO5w5JQOnmeZnKY
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

house_data = pd.read_csv('/content/sample_data/california_housing_train.csv')
house_data.head()

print(house_data.head())

house_data.tail()

print(house_data.tail())

print(house_data.shape)

house_data.info()

print(house_data.info())

house_data.isnull()

print(house_data.isnull())

print(house_data.describe())

x = pd.read_csv('/content/sample_data/california_housing_train.csv')
x = house_data.drop(columns='median_house_value', axis=1)

print(x)

y = house_data['median_house_value']

print(y)

x_train = x
y_train = y

test = pd.read_csv('/content/sample_data/california_housing_test.csv')
test.head()

x1 = test.drop(columns='median_house_value', axis=1)
y1 = test['median_house_value']

print(y1)

x_test = x1
y_test = y1

print(y_test.shape)

print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)

model = LogisticRegression()

model.fit(x_train, y_train)
print(model)

pip install lazypredict

import lazypredict
from lazypredict.Supervised import LazyRegressor
from sklearn import metrics
import matplotlib.pyplot as plt

reg = LazyRegressor(verbose=0, ignore_warnings=False, custom_metric=None)
models, predictions = reg.fit(x_train, x_test, y_train, y_test)

print(models)

from sklearn.ensemble import BaggingRegressor
reg = BaggingRegressor()
reg.fit(x_train, y_train)

# Predict
y_pred = reg.predict(x_test)

# Score
'''mse = metrics.mean_squared_error(y_test, y_pred)
print('mse: ', np.round(mse, 4))

mae = metrics.mean_absolute_error(y_test, y_pred)
print('mae: ', np.round(mae, 4))'''

r2 = metrics.r2_score(y_test, y_pred)
print('r2: ', np.round(r2, 4))


# Plot
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel('y_test')
plt.ylabel('y_pred')